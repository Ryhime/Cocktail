package Cocktail.Backend;

import Cocktail.Enums.SystemCall;
import Cocktail.Enums.VariableType;
import Cocktail.Models.Symbol;
import java.io.File;
import java.io.FileWriter;

public class CodeGen {
    // Name of the the assembly file
    private String assemblyFileName;

    // Name of the final executable and create object file
    private String targetExecutableFileName;

    // The file write writing to the assembly file
    private FileWriter fileWriter;

    /**
     * Constructor for CodeGen
     */
    public CodeGen(String assemblyFileName, String targetExecutableFileName) {
        this.assemblyFileName = assemblyFileName;
        this.targetExecutableFileName = targetExecutableFileName;
        try {
            this.fileWriter = new FileWriter(new File(this.assemblyFileName));
        } catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }

        // TODO: Replace with actual AST parse
        this.createAssemblyHeaderSection();
        this.createAssemblyTextSection();
        this.createWriteSystemCall(1, "hello", 14);
        this.createWriteSystemCall(1, "Character", 1);
        this.createExitSystemCall(0);

        this.createAssemblyDataSection();
        this.declareConstantValue(new Symbol("hello", "Hello, World!"));
        this.declareConstantValue(new Symbol("Integer", 5));
        this.declareConstantValue(new Symbol("Character", 'a'));

        // TODO - end

        try {
            this.fileWriter.close();
        }
        catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }
        this.asmToObject();
    }

    /**
     * Writes the header to the assembly file
     */
    private void createAssemblyHeaderSection() {
        try {
            // Write Header
            this.fileWriter.write("; Starting Header\n");
            this.fileWriter.write("; Generated by Cocktail\n");
            this.fileWriter.write("; Executable File: " + this.targetExecutableFileName + "\n\n");
            this.fileWriter.write("global _start\n");
        } catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }
    }

    /**
     * Writes the main text section to the assembly file
     */
    private void createAssemblyTextSection() {
        try {
            this.fileWriter.write("\nsection .text:\n");
            this.fileWriter.write("_start:\n");
        }
        catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }
    }


    /**
     * Writes a write system call to the assembly file
     */
    private void createWriteSystemCall(int fileDescriptor, String message, int messageLength) {
        try {
            this.fileWriter.write("\tmov eax, " + SystemCall.WRITE.getSystemCallNumber() + "\n");
            this.fileWriter.write("\tmov ebx, " + fileDescriptor + "\n");
            this.fileWriter.write("\tmov ecx, " + message + "\n");
            this.fileWriter.write("\tmov edx, " + messageLength + "\n");
            this.fileWriter.write("\tint 0x80\n");
        }
        catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }
    }

    /**
     * Writes an exit system call to the assembly file
     */
    private void createExitSystemCall(int exitCode) {
        try {
            this.fileWriter.write("\tmov eax, " + SystemCall.EXIT.getSystemCallNumber() + "\n");
            this.fileWriter.write("\tmov ebx, " + exitCode + "\n");
            this.fileWriter.write("\tint 0x80\n");
        }
        catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }
    }

    /**
     * Writes the data section to the assembly file
     */
    private void createAssemblyDataSection() {
        try {
            this.fileWriter.write("\nsection .data:\n");
        }
        catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }
    }

    /**
     * Declare a constant value in the data section
     */
    private void declareConstantValue(Symbol symbol) {
        try {
            String value;
            if (symbol.getVariableType() == VariableType.STRING || symbol.getVariableType() == VariableType.CHAR) {
                value = "\"" + symbol.valueToString() + "\"";
            } else {
                value = symbol.valueToString();
            }

            this.fileWriter.write("\t" + symbol.getName() + ": dd " + value + "\n");
        }
        catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }
    }

    /**
     * Converts an ASM file to an object file and runs it by calling the sh file
     */
    private void asmToObject() {
        try {
            // Create object file
            String[] runBashCommand = new String[] {
                "nasm", "-f", "elf32", "-o", targetExecutableFileName + ".o", assemblyFileName
            };

            Process process = Runtime.getRuntime().exec(runBashCommand);
            process.waitFor();
            
            // Create executable files
            runBashCommand = new String[] {
                "ld", "-m", "elf_i386", "-o", targetExecutableFileName, targetExecutableFileName+".o"
            };

            process = Runtime.getRuntime().exec(runBashCommand);
            process.waitFor();
        } catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }
    }
}