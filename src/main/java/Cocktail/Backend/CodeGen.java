package Cocktail;
import java.io.File;
import java.io.FileWriter;

public class CodeGen {
    // Name of the the assembly file
    private String assemblyFileName;
    // Name of the final executable and create object file
    private String targetExecutableFileName;

    /**
     * Constructor for CodeGen
     */
    public CodeGen(String assemblyFileName, String targetExecutableFileName) {
        this.assemblyFileName = assemblyFileName;
        this.targetExecutableFileName = targetExecutableFileName;
        this.CreateInitFile();
        this.AsmToObject();
    }


    private void CreateInitFile() {
        try {
            // Create a new file
            File file = new File(this.assemblyFileName);
            // Write to the file
            FileWriter fileWriter = new FileWriter(file);
            fileWriter.write("; Generated by Cocktail\n");
            fileWriter.write("; Executable File: " + this.targetExecutableFileName + "\n\n");
            fileWriter.write("global _start\n");
            fileWriter.write("\nsection .text\n");
            fileWriter.write("_start:\n");
            // Hard write in a return 0
            fileWriter.write("mov eax, 1\n");
            fileWriter.write("mov ebx, 0\n");
            fileWriter.write("int 0x80\n");

            fileWriter.write("\nsection .data\n");

            fileWriter.close();
        } catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }
    }

    /**
     * Converts an ASM file to an object file and runs it by calling the sh file
     */
    private void AsmToObject() {
        try {
            // Create object file
            String[] runBashCommand = new String[] {
                "nasm", "-f", "elf32", "-o", targetExecutableFileName + ".o", assemblyFileName
            };

            Process process = Runtime.getRuntime().exec(runBashCommand);
            process.waitFor();
            
            // Create executable files
            runBashCommand = new String[] {
                "ld", "-m", "elf_i386", "-o", targetExecutableFileName, targetExecutableFileName+".o"
            };

            process = Runtime.getRuntime().exec(runBashCommand);
            process.waitFor();
        } catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }
    }
}