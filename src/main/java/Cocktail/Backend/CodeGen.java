package Cocktail;
import java.io.File;
import java.io.FileWriter;

public class CodeGen {
    // Name of the the assembly file
    private String assemblyFileName;

    // Name of the final executable and create object file
    private String targetExecutableFileName;

    // The file write writing to the assembly file
    private FileWriter fileWriter;

    /**
     * Constructor for CodeGen
     */
    public CodeGen(String assemblyFileName, String targetExecutableFileName) {
        this.assemblyFileName = assemblyFileName;
        this.targetExecutableFileName = targetExecutableFileName;
        try {
            this.fileWriter = new FileWriter(new File(this.assemblyFileName));
        } catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }

        this.CreateAssemblyHeaderSection();
        this.CreateAssemblyTextSection();
        this.CreateAssemblyDataSection();
        try {
            this.fileWriter.close();
        }
        catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }
        this.AsmToObject();
    }

    /**
     * Writes the header to the assembly file
     */
    private void CreateAssemblyHeaderSection() {
        try {
            // Write Header
            this.fileWriter.write("; Starting Header\n");
            this.fileWriter.write("; Generated by Cocktail\n");
            this.fileWriter.write("; Executable File: " + this.targetExecutableFileName + "\n\n");
            this.fileWriter.write("global _start\n");
        } catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }
    }

    /**
     * Writes the main text section to the assembly file
     */
    private void CreateAssemblyTextSection() {
        try {
            this.fileWriter.write("\nsection .text\n");
            this.fileWriter.write("_start:\n");


            // Return a zero response
            this.fileWriter.write("\tmov eax, 1\n");
            this.fileWriter.write("\txor ebx, 0\n");
            this.fileWriter.write("\tint 0x80\n");
        }
        catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }
    }

    /**
     * Writes the data section to the assembly file
     */
    private void CreateAssemblyDataSection() {
        try {
            this.fileWriter.write("\nsection .data\n");
        }
        catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }
    }

    private void DeclareConstantValue(Symbol symbol) {
        
        
    }

    /**
     * Converts an ASM file to an object file and runs it by calling the sh file
     */
    private void AsmToObject() {
        try {
            // Create object file
            String[] runBashCommand = new String[] {
                "nasm", "-f", "elf32", "-o", targetExecutableFileName + ".o", assemblyFileName
            };

            Process process = Runtime.getRuntime().exec(runBashCommand);
            process.waitFor();
            
            // Create executable files
            runBashCommand = new String[] {
                "ld", "-m", "elf_i386", "-o", targetExecutableFileName, targetExecutableFileName+".o"
            };

            process = Runtime.getRuntime().exec(runBashCommand);
            process.waitFor();
        } catch (Exception e) {
            // Catch Error
            System.out.println(e);
        }
    }
}